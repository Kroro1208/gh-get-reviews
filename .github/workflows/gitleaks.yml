name: gitleaks-scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install gitleaks (go install)
        env:
          GOPATH: /tmp/gopath
          GOBIN: /tmp/gitleaks_bin
        run: |
          echo "Installing gitleaks via go install"
          # ensure go is available on runner
          go version || (echo "go is not available in runner" && exit 1)
          mkdir -p /tmp/gitleaks_bin
          GOPATH=/tmp/gopath GOBIN=/tmp/gitleaks_bin go install github.com/zricethezav/gitleaks/v8@latest
          ls -la /tmp/gitleaks_bin
          /tmp/gitleaks_bin/gitleaks version

      - name: Run gitleaks CLI
        run: |
          /tmp/gitleaks detect --source . --config .gitleaks.toml --report-format json --report-path gitleaks-report.json --redact || true

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

      - name: Create Issue if findings
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'gitleaks-report.json';
            if (!fs.existsSync(reportPath)) {
              console.log('No gitleaks report found');
              return;
            }
            let report = null;
            try {
              report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            } catch (e) {
              console.log('Failed to parse gitleaks report', e.message);
              return;
            }
            let findings = [];
            if (Array.isArray(report)) findings = report;
            else if (report.findings) findings = report.findings;
            else if (report.Findings) findings = report.Findings;
            const count = findings.length || 0;
            if (count === 0) {
              console.log('No findings in gitleaks report');
              return;
            }
            const snippet = JSON.stringify(findings.slice(0, 10), null, 2);
            const body = `gitleaks detected ${count} potential secrets. Showing up to 10 findings:\n\n${snippet}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security: gitleaks detected ${count} potential secrets`,
              body,
            });
